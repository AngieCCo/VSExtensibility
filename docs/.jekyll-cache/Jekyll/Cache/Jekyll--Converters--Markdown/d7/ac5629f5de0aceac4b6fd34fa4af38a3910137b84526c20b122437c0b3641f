I"¦<h1 id="out-of-process-extensibility-model-overview">Out-of-Process Extensibility Model Overview</h1>

<p>While the existing model loads extensions in-process, the new extensibility model brings Visual Studio extensions out-of-process.  This out-of-proc model gives you the opportunity to create more reliable, secure, and easier-to-write extensions while still providing the in-depth functionality the old model provides.  The following documentation describes:</p>

<ul>
  <li>The general architecture of the new extensibility model</li>
  <li>How to take advantage of the new extensibility modelâ€™s APIs</li>
  <li>How to compile and F5 debug an extension with the new model</li>
  <li>Resources and code samples to get started writing an extension with the new model</li>
</ul>

<h2 id="what-is-the-new-extensibility-model--why-should-you-use-it">What is the new extensibility model &amp; why should you use it?</h2>

<p>The new, out-of-proc extensibility model aims to address many of the problems both developers experience when using and writing extensions in Visual Studio using the old model.  These issues include:</p>

<ul>
  <li>Extension-caused crashes and hangs of Visual Studio and other installed extensions</li>
  <li>Inconsistent hard-to-find docs and APIs, tribal knowledge requirements, and overwhelming architecture</li>
  <li>Lack of secure extensions</li>
  <li>Having to restart Visual Studio when installing extensions</li>
</ul>

<p>Writing extensions using the new model provides the following benefits:</p>

<ul>
  <li><strong>Increased reliability</strong> â€“ Extensions written with the new model are out-of-proc and will not block the Visual Studio UI.  This means that if the extension crashes, VS will not crash as a result.</li>
  <li><strong>Reduced API complexity</strong> â€“ The new modelâ€™s wrapper API has been built from the ground-up to be more cohesive and simpler to implement while retaining the old modelâ€™s advanced functionality.</li>
  <li><strong>Low-trust extensions (Coming Soon)</strong> â€“ Since extensions in the new model run in a separate process, they can be isolated from devenv and ran in a low-trust sandbox. This environment will provide the extensions with read-only access to the file system and controlled writing access via the modelâ€™s APIs.</li>
  <li><strong>Hot-reloading functionality (Coming Soon)</strong> â€“ Excluding ones requiring VS component prerequisites that havenâ€™t been installed yet, extensions written using the new model can be installed and loaded without needing to restart Visual Studio.</li>
  <li><strong>.NET Core Only</strong> â€“ With VS transitioning primarily to .NET core, all new model extensions will be run on .NET core.  All APIs will also be built on .NET core and will be .NET 6 compatible.</li>
  <li><strong>Cross-CPU Platform</strong> â€“ Since APIs will be IServiceBroker and .NET core based, all Gladstone extensions will run on all CPU platforms supported by .net core runtime.</li>
</ul>

<h2 id="next-steps">Next Steps</h2>

<p>To get started writing an extension using the new model, here are some docs, walkthroughs, samples, and videos to get you started:</p>

<p><strong>[TODO: Add links to docs here]</strong></p>
:ET