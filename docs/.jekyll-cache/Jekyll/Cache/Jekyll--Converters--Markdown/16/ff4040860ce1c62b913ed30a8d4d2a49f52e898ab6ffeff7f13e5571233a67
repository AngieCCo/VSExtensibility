I"»!<h1 id="anatomy-of-a-new-visual-studio-extension">Anatomy of a new Visual Studio Extension</h1>
<p>An extension utilizing the new extensibility SDK will have several components that interact together and also with Visual Studio.</p>

<h2 id="extension-instance">Extension instance</h2>
<p>The starting point for each extension is an instance of <code class="language-plaintext highlighter-rouge">Microsoft.VisualStudio.Extensibility.Extension</code>. This instance contains the necessary methods for Visual Studio to query services provided by the extension and also provides virtual methods for extension to provide localized resourcs and extension owned local services to be shared between the components of the extension.</p>

<p>For simple extensions that donâ€™t require such services, a default implementation will be created by code generators at build time. See <code class="language-plaintext highlighter-rouge">SimpleRemoteCommandSample</code> extension for such an example.</p>

<p>In other cases, such as <code class="language-plaintext highlighter-rouge">MarkdownLinter</code> extension project will have its own class that derives from <code class="language-plaintext highlighter-rouge">Microsoft.VisualStudio.Extensibility.Extension</code> to customize certain aspects of the extension.</p>

<p>For extension developers that are familiar with the existing VS SDK APIs, this class is very similar to <code class="language-plaintext highlighter-rouge">AsyncPackage</code> class that is used in the in-process extensibility model.</p>

<h2 id="visualstudioextensibility-object">VisualStudioExtensibility object</h2>
<p>The object <code class="language-plaintext highlighter-rouge">Microsoft.VisualStudio.Extensibility.VisualStudioExtensibility</code> acts as the entry point for extensibility features exposed by Visual Studio. This class will have various extension methods, properties to quickly enumerate through available features in extensibility SDK. Please see the (TBD:link) API documentation for available methods.</p>

<h2 id="extension-parts">Extension parts</h2>
<p>For features where an extension contributes components to Visual Studio such as commands, editor listeners, extensions will utilize attributed classes. Build process will generate the correct metadata to ensure these components can be discovered by Visual Studio.</p>

<p>Currently the SDK supports a limited set of components to be exported:</p>

<ul>
  <li><a href="TBD">Command handlers</a></li>
  <li><a href="TBD">Text view lifetime listeners</a> for tracking text view created, closed events.</li>
  <li><a href="TBD">Text view change listeners</a> for tracking changes to an open text view.</li>
</ul>

<p>Instances for these classes will be created as part of the extensibility framework provided by the SDK using dependency injection library and constructors can be used to retrieve instances of services provided by either the SDK or by the extension itself to share state across components.</p>

<h3 id="lifetime-of-extension-parts">Lifetime of extension parts</h3>
<p>Lifetime of each part is managed by the respective commponent that loads those parts inside Visual Studio IDE process.</p>

<ul>
  <li>
    <p>Command handlers will be initialized when the corresponding command set is activated which can be during the first execution of the command. Once activated, command handlers should only be disposed when IDE is shutdown.</p>
  </li>
  <li>
    <p>Similarly text view event listeners will be initialized when the first text view matching the content type specified is loaded in the IDE. Currently, such listeners will be active until IDE is shutdown but this behavior may change in future.</p>
  </li>
</ul>

<p>In general, for complex extensions we recommend extension to provide local services that parts can import in their constructor and using those services to share state across parts and across instances of the same part. This will ensure that extension state is not affected by lifetime changes of extension parts.</p>

<h3 id="services-provided-by-sdk-for-injection">Services provided by SDK for injection</h3>
<p>The following services are provided by the SDK that can be used in constructor for any extension part:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">VisualStudioExtensibility</code>: Every extension part can inject an instance of <code class="language-plaintext highlighter-rouge">VisualStudioExtensibility</code> to interact with Visual Studio IDE.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Extension</code>: Parts can inject <code class="language-plaintext highlighter-rouge">Microsoft.VisualStudio.Extensibility.Extension</code> type or the extensions own type inheriting from it to extension parts.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">TraceSource</code>: A trace source instance is created on demand for each extension that can be used to record diagnostic information. These instances are registered with Visual Studio diagnostics provider which can be used to merge logs from multiple services and utilize future tooling to access real time logging. See <a href="Logging.md">Logging</a> section for more information.</p>
  </li>
  <li>
    <p>Local services: Any local services provided by the extension itself will also be available for dependency injection.</p>
  </li>
</ul>

<h2 id="local-extension-services">Local extension services</h2>
<p>In certain scenarios an extension may want to share state between different components such as a command handler and a text view change listener, as it can be seen in <code class="language-plaintext highlighter-rouge">MarkdownLinter</code> example. These services can be added to in-process service collection via overriding <code class="language-plaintext highlighter-rouge">Extension.InitializeServices</code> method and as instances of extension parts are created, the services will be injected based on the constructor arguments.</p>

<p>There are 3 options that a service can be added:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">AddTransient</code>: A new instance of the service is created for each part that ingests it.</li>
  <li><code class="language-plaintext highlighter-rouge">AddScoped</code>: A new instance of the service is created within a certain scope. In context of Visual Studio extensibility, scope refers to a single extension part.</li>
  <li><code class="language-plaintext highlighter-rouge">AddSingleton</code>: There is a single shared instance of service that is created on first ingestion.</li>
</ul>

<p>Due to lifetime of <code class="language-plaintext highlighter-rouge">VisualStudioExtensibility</code> object being bound to the scope of a single extension part, any local service that ingests it has to be a scoped or transient service. Trying to create a singleton service that injects <code class="language-plaintext highlighter-rouge">VisualStudioExtensibility</code> will result in failure.</p>

<p>For an example of how local services are used please see <a href="../Extension_Guides/MarkdownLinterSample.md">MarkdownLinte extension guide</a>.</p>

<h2 id="client-context">Client context</h2>
<p>As all extensions in the new SDK runs out of process, we introduce the concept of client context for various extension parts to represent the state of the IDE as when the event or method is invoked. This context is represented by <code class="language-plaintext highlighter-rouge">IClientContext</code> instance in the SDK and is passed in to various operations such as command execution handlers. The SDK provides extension methods on <code class="language-plaintext highlighter-rouge">IClientContext</code> that can be utilized to retrieve objects from the context. For example extensions can get the active text view or the URI for the selected items at the time of command execution utilizing <code class="language-plaintext highlighter-rouge">IClientContext</code> instance.</p>

<p>Some components such as commands, will also have allow extension developers to declare which contexts they are interested. This is done to optimize the amount of data transferred in each remote execution since client context can get large in the future. In the initial preview, there are only two available contexts <code class="language-plaintext highlighter-rouge">Shell</code> and <code class="language-plaintext highlighter-rouge">Editor</code> and both are included by default when declaring a command using <code class="language-plaintext highlighter-rouge">CommandAttribute</code>.</p>
:ET