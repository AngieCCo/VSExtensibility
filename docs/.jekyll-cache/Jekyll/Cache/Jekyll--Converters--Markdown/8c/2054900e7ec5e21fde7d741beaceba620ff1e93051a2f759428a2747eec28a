I"ô<h1 id="walkthrough-markdown-linter-extension">Walkthrough: Markdown Linter Extension</h1>

<p>This extension shows how multiple components can interact together inside an extension and how different areas of Visual Studio can be extended.</p>

<h2 id="summary">Summary</h2>
<p>Markdown Linter extension showcases samples of:</p>

<ul>
  <li>Creating a command handler</li>
  <li>Creating text view change and creation listeners</li>
  <li>Introducing local services that are shared across extension parts</li>
  <li>Interacting with output window and Error List.</li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>
<p>This extension assumes <code class="language-plaintext highlighter-rouge">markdownlint-cli</code> npm package is installed globally in order to successfully run linter on markdown files.</p>

<p>You can run <code class="language-plaintext highlighter-rouge">npm install -g markdownlint-cli</code> to install the package before running the sample.</p>

<h2 id="markdownlinterextension-instance">MarkdownLinterExtension instance</h2>
<p>Different to previous samples, this extension implements its own class that inherits from <code class="language-plaintext highlighter-rouge">ExtensionWithCommand</code> as our extension contains commands and also want to introduce local services.</p>

<p>There are 2 interesting points in the implementation of <code class="language-plaintext highlighter-rouge">MarkdownLinterExtension</code>:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ResourceManager</code> property points to the resource dictionary that contains localized entries that would be used for creating an output window pane.</li>
  <li><code class="language-plaintext highlighter-rouge">InitializeServices</code> method is used to add local services to the dependency injection graph. As noted in <a href="../Inside_the_SDK/ExtensionAnatomy.md#local-extension-services">local services section</a>, the extension utilizes a scoped <code class="language-plaintext highlighter-rouge">MarkdownDiagnosticsService</code> as the service instance injects <code class="language-plaintext highlighter-rouge">VisualStudioExtensibility</code> object.</li>
</ul>

<h2 id="markdowndiagnosticsservice-local-service">MarkdownDiagnosticsService local service</h2>
<p>In this example, this local service acts as the central for managing markdown file diagnostics. It is responsible for running markdown linter on the files requested and forward errors to diagnostic service.</p>

<p>For more information on individual APIs used please refer to:</p>

<ul>
  <li>Views API for output window</li>
  <li>Languages API for diagnostics</li>
</ul>

<h2 id="runlinteroncurrentfilecommand">RunLinterOnCurrentFileCommand</h2>
<p>One part of the extension is a command that can run markdown linter on the current selected file in Solution Explorer.</p>

<p>The command retrieves the selection from <code class="language-plaintext highlighter-rouge">IClientContext</code> instance and forwards the request to local <code class="language-plaintext highlighter-rouge">MarkdownDiagnosticsService</code> service instance.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Get the selected item URIs from IDE context that reprents the state when command was executed.</span>
<span class="kt">var</span> <span class="n">selectedItemPaths</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Uri</span><span class="p">[]</span> <span class="p">{</span> <span class="k">await</span> <span class="n">context</span><span class="p">.</span><span class="nf">GetSelectedPathAsync</span><span class="p">(</span><span class="n">cancellationToken</span><span class="p">)</span> <span class="p">};</span>

<span class="c1">// Enumerate through each selection and run linter on each selected item.</span>
<span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">selectedItem</span> <span class="k">in</span> <span class="n">selectedItemPaths</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">IsFile</span><span class="p">))</span>
<span class="p">{</span>
    <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="n">diagnosticsProvider</span><span class="p">.</span><span class="nf">ProcessFileAsync</span><span class="p">(</span><span class="n">selectedItem</span><span class="p">,</span> <span class="n">cancellationToken</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="textvieweventlistener">TextViewEventListener</h2>
<p>Another part of the extension is an editor component that listens for new editor view creation and changes to open views. This component monitors for events on <code class="language-plaintext highlighter-rouge">.md</code> files and routes the request to <code class="language-plaintext highlighter-rouge">MarkdownDiagnosticsService</code> as contents change.</p>

<p>Note that because this extension part implements two contract interfaces, it must ensure that both contracts are specified as an extension part:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nf">ExtensionPart</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">ITextViewLifetimeListener</span><span class="p">))]</span>
<span class="p">[</span><span class="nf">ExtensionPart</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">ITextViewChangedListener</span><span class="p">))]</span>
<span class="p">[</span><span class="nf">AppliesTo</span><span class="p">(</span><span class="n">ContentType</span> <span class="p">=</span> <span class="s">"text"</span><span class="p">)]</span>
</code></pre></div></div>

<p>The extension part also utilizes <code class="language-plaintext highlighter-rouge">AppliesTo</code> attribute to indicate that it is interested in events from views with <code class="language-plaintext highlighter-rouge">text</code> content type. (Note, this is required as there is no <code class="language-plaintext highlighter-rouge">markdown</code> content type in Visual Studio)</p>

<p>Even though this class implements 2 different contracts, a single instance of it will be created so that state can be shared between different editor components that interact together.</p>
:ET